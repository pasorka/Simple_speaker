# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file './speacher.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog, QMessageBox
import os
from speaker import Speaker


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(492, 387)
        MainWindow.setMaximumSize(QtCore.QSize(492, 387))
        MainWindow.setStyleSheet("")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.button_path_file = QtWidgets.QPushButton(self.centralwidget)
        self.button_path_file.setGeometry(QtCore.QRect(60, 130, 371, 71))
        self.button_path_file.setObjectName("button_path_file")
        self.progress_bar = QtWidgets.QProgressBar(self.centralwidget)
        self.progress_bar.setGeometry(QtCore.QRect(0, 0, 491, 101))
        self.progress_bar.setMaximum(100)
        self.progress_bar.setProperty("value", 0)
        self.progress_bar.setTextVisible(True)
        self.progress_bar.setOrientation(QtCore.Qt.Horizontal)
        self.progress_bar.setInvertedAppearance(False)
        self.progress_bar.setTextDirection(QtWidgets.QProgressBar.TopToBottom)
        self.progress_bar.setObjectName("progress_bar")
        self.slow_flag = QtWidgets.QCheckBox(self.centralwidget)#QRadioButton(self.centralwidget)
        self.slow_flag.setGeometry(QtCore.QRect(330, 320, 61, 25))
        self.slow_flag.setObjectName("slow_flag")
        self.button_path_to_save = QtWidgets.QPushButton(self.centralwidget)
        self.button_path_to_save.setGeometry(QtCore.QRect(60, 210, 371, 71))
        self.button_path_to_save.setObjectName("button_path_to_save")
        self.button_start = QtWidgets.QPushButton(self.centralwidget)
        self.button_start.setGeometry(QtCore.QRect(20, 300, 231, 71))
        self.button_start.setObjectName("button_start")
        MainWindow.setCentralWidget(self.centralwidget)
        
        
        # parameters
        self.path_file = ''
        self.path_save = ''
        self.slow = False
        self.is_working = False
        
        
        self.add_functions()

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Simple speacher"))
        self.button_path_file.setText(_translate("MainWindow", "Выберите файл для озвучки"))
        self.progress_bar.setFormat(_translate("MainWindow", "%p%"))
        self.slow_flag.setText(_translate("MainWindow", "Slow"))
        self.button_path_to_save.setText(_translate("MainWindow", "Выберите место сохранения файла озвучки"))
        self.button_start.setText(_translate("MainWindow", "Начать озвучку"))


    def add_functions(self):        
        self.button_path_file.clicked.connect(self.pick_path_file)
        self.button_path_to_save.clicked.connect(self.pick_path_to_save)
        self.button_start.clicked.connect(self.start_recording)
        


    def pick_path_file(self):
        self.path_file = QFileDialog.getOpenFileName()[0]
        print(self.path_file)
        print(os.path.dirname(self.path_file))
        
    
    def pick_path_to_save(self):
        save_path = QFileDialog.getExistingDirectoryUrl()
        save_path = save_path.toString()
        self.path_save = save_path[7:]


    
    
    def start_recording(self):
        
        if self.is_working:
            error_working = QMessageBox()
            error_working.setText('Программа уже работает\nДождитесь окончания озвучивания файла')
            
            error_working.exec_()
        
        else:
            if not self.path_file:
                error_pick_path_file = QMessageBox()
                error_pick_path_file.setText('Вам необходимо выбрать файл для озвучки')
                error_pick_path_file.setIcon(QMessageBox.Warning)

                error_pick_path_file.setStandardButtons(QMessageBox.Open)
                error_pick_path_file.buttonClicked.connect(self.pick_path_file)
                
                error_pick_path_file.exec_()
            
            if not self.path_save:
                error_pick_path_save = QMessageBox()
                error_pick_path_save.setText('Вам необходимо выбрать место для сохранения файла')
                error_pick_path_save.setIcon(QMessageBox.Warning)

                error_pick_path_save.setStandardButtons(QMessageBox.Open | QMessageBox.Ok)
                error_pick_path_save.setInformativeText('При нажатии OK будет использована место, где находиться файл для озвучки')
                error_pick_path_save.buttonClicked.connect(self.error_save_path)
                
                error_pick_path_save.exec_()
            
            
            try:
                speak = Speaker(self.path_file, self.path_save)
                slow = self.slow_flag.isChecked()
                lines = speak.num_lines
                
                self.is_working = True
            
                for progress_value in speak.recording(slow=slow, callback=True):
                    self.progress_bar.setValue(progress_value)

                    
                
            
            except TypeError as message:
                message = str(message) + '\nВыберите другой файл'

                error_type = QMessageBox()
                error_type.setText(message)
                error_type.setIcon(QMessageBox.Warning)
                
                error_type.setStandardButtons(QMessageBox.Ok)  
                
                error_type.exec_()
            
            self.progress_bar.setValue(0)
            self.is_working = False
            self.path_file = ''
            self.path_save = ''
                    
            final = QMessageBox()
            final.setText('Озвучка завершена')
            final.setStandardButtons(QMessageBox.Ok)
                    
            final.exec_()
        

    
    
    def error_save_path(self, btn):
        if btn.text() == 'OK':
            self.path_save = os.path.dirname(self.path_file)
        elif btn.text() == "Open":
            self.pick_path_to_save()
    
    


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
